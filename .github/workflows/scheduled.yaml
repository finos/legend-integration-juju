name: Refresh EKS FINOS Legend deployment

on:
  workflow_dispatch:
  schedule:
    # Runs everyday at 00:00. (see https://crontab.guru)
    - cron: "0 0 * * *"

jobs:
  build:
    name: Trigger Juju refresh on EKS Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Installing Dependencies
        run: |
          sudo snap install juju --channel=3.1/stable --classic

      - name: Install Docker
        uses: docker-practice/actions-setup-docker@master

      # We need the kubeconfig and the controllers.yaml file into our environment
      # in order to login and refresh the charms.
      - name: Adding Credentials
        shell: bash
        run: |
          mkdir -p ~/.kube
          mkdir -p ~/.local/share/juju
          echo "${KUBECONFIG_B64}" | base64 -d > ~/.kube/config
          echo "${CONTROLLERS_B64}" | base64 -d > ~/.local/share/juju/controllers.yaml

          echo "${CONTROLLER_PASSWORD}" | juju login -c finos-legend-v3 -u admin

        env:
          KUBECONFIG_B64: "${{ secrets.KUBECONFIG_B64 }}"
          CONTROLLERS_B64: "${{ secrets.CONTROLLERS_B64 }}"
          CONTROLLER_PASSWORD: "${{ secrets.CONTROLLER_PASSWORD }}"

      - name: Refreshing Charms
        run: |
          set -x

          # We only refresh the staging environment. We need to check which model
          # is the staging one. We can find it by the configured external-hostname.
          # Controller name is "finos-legend-v3", model name is "finos-legend"
          model="finos-legend-v3:finos-legend"
          if [ "$(juju config -m $model legend-studio external-hostname)" != "staging.legend.finos.org" ]; then
            model="finos-legend-v3:finos-legend-twin"
          fi

          juju switch "${model}"
                    
          # Running juju status will show us the current revisions of the charms.
          juju status --relations


          update-images() {
            charm_name=$1 
            resource_name=$2
            application_name=$3
            
            juju resources ${application_name}/0 --details

            download_url=$(curl -sL https://api.charmhub.io/v2/charms/resources/$charm_name/$resource_name/revisions |  jq 'map( .[-1].download.url)'[0] | tr -d '"')
            curl -sLo ${resource_name}_download.oci $download_url
            ls
            sha256sum ${resource_name}_download.oci
            juju attach-resource --debug $application_name $resource_name=${resource_name}_download.oci

            juju resources ${application_name}/0 --details

          #	charmhub_timestamp=$(curl -sL https://api.charmhub.io/v2/charms/resources/$charm_name/$resource_name/revisions |  jq 'map( .[-1]."created-at")'[0] | tr -d '"')
          #	local_timestamp=$(juju resources $application_name --format=json | jq 'map( .[0].timestamp)'[0] | tr -d '"')

          #	charmhub_timestamp_ut=$(date -d ${charmhub_timestamp} +%s)
          #	local_timestamp_ut=$(date -d ${local_timestamp} +%s)


          #	if [ $charmhub_timestamp_ut -ge $local_timestamp_ut ];
          #		then 
          #			download_url=$(curl -sL https://api.charmhub.io/v2/charms/resources/$charm_name/$resource_name/revisions |  jq 'map( .[-1].download.url)'[0] | tr -d '"')
          #			curl -sLo $resource_name_download $download_url
          #			juju attach-resource $application_name $resource_name=$resource_name_download --debug
          #		else
          #			echo "Already running the latest image."
          #	fi

          }
                          
          update-images finos-legend-engine-k8s engine-image legend-engine 
          update-images finos-legend-sdlc-k8s sdlc-image legend-sdlc 
          update-images finos-legend-studio-k8s studio-image legend-studio 

          # Updates the charm code if available
          juju refresh legend-engine --channel="latest/edge"
          juju refresh legend-sdlc --channel="latest/edge"
          juju refresh legend-studio --channel="latest/edge"
                  
          # Running juju status will show us the current revisions of the charms.
          juju status --relations

      - name: Check Legend Public Instance status
        run: |
          wait_for_curl() {
            url="$1"
            expected_code="${2:-302 Found}"
            for i in {1..40}; do
              # Any request to any Legend Application should be redirected to gitlab.com
              curl -i "${url}" | grep "${expected_code}" && break
              if [ "$i" -eq 40 ]; then
                echo "Failed to get '302 Found' response status from ${url}"
                exit 1
              fi
              sleep 10
            done
          }

          wait_for_curl "https://staging.legend.finos.org/engine/"
          wait_for_curl "https://staging.legend.finos.org/api"
          wait_for_curl "https://staging.legend.finos.org/studio"
          wait_for_curl "https://staging.legend.finos.org/" "200 OK"

          echo "Staging Legend is reachable, getting redirected to gitlab."

      - name: Send email on failure
        if: failure() && github.event_name == 'schedule'
        uses: vineetchoudhary/mailgun-action@master
        with:
          api-key: ${{ secrets.MAILGUN_API_KEY }}
          domain: ${{ secrets.MAILGUN_DOMAIN }}
          to: ${{ secrets.EMAIL_TO }}
          subject: "${{ github.job }} job of ${{ github.repository }} has failed"
          body: "${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has failed: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      - name: Send Mail Action Response
        run: echo "${{ steps.sendmail.outputs.response }}"
